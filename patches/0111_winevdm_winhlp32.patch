From 3933797cef9556baed168920c7167afb0a73b89d Mon Sep 17 00:00:00 2001
From: Khral Steelforge <garuda2550@gmail.com>
Date: Mon, 25 Feb 2019 02:58:17 +0700
Subject: winhlp32: Port the patch from winevdm.

https://github.com/otya128/winevdm/tree/master/winhlp32

Signed-off-by: Khral Steelforge <garuda2550@gmail.com>

diff --git a/programs/winhlp32/Makefile.in b/programs/winhlp32/Makefile.in
index 40ce8a1f11..db245dccaa 100644
--- a/programs/winhlp32/Makefile.in
+++ b/programs/winhlp32/Makefile.in
@@ -1,6 +1,6 @@
 MODULE    = winhlp32.exe
 APPMODE   = -mwindows
-IMPORTS   = user32 gdi32
+IMPORTS   = user32 gdi32 ole32
 DELAYIMPORTS = shell32 comctl32 comdlg32
 
 C_SRCS = \
diff --git a/programs/winhlp32/hlpfile.c b/programs/winhlp32/hlpfile.c
index 3ade6c1d5d..99a98e3248 100644
--- a/programs/winhlp32/hlpfile.c
+++ b/programs/winhlp32/hlpfile.c
@@ -29,6 +29,7 @@
 #include "wingdi.h"
 #include "winuser.h"
 #include "winhelp.h"
+#include "winnls.h"
 
 #include "wine/debug.h"
 
@@ -596,7 +597,7 @@ static ULONG fetch_ulong(const BYTE** ptr)
         (*ptr) += 2;
     }
     return ret;
-}    
+}
 
 static short fetch_short(const BYTE** ptr)
 {
@@ -1032,16 +1033,20 @@ static BOOL HLPFILE_RtfAddBitmap(struct RtfData* rd, HLPFILE* file, const BYTE*
     if (!HLPFILE_RtfAddControl(rd, "{\\pict")) goto done;
     if (type == 0x06)
     {
-        sprintf(tmp, "\\dibitmap0\\picw%d\\pich%d",
-                bi->bmiHeader.biWidth, bi->bmiHeader.biHeight);
+        /* 96dpi: 15twips = 1px */
+        sprintf(tmp, "\\dibitmap0\\picw%d\\pich%d\\picwgoal%d\\pichgoal%d",
+                bi->bmiHeader.biWidth, bi->bmiHeader.biHeight,
+                bi->bmiHeader.biWidth * 15, bi->bmiHeader.biHeight * 15);
         if (!HLPFILE_RtfAddControl(rd, tmp)) goto done;
-        if (!HLPFILE_RtfAddHexBytes(rd, bi, sizeof(*bi) + nc * sizeof(RGBQUAD))) goto done;
+        if (!HLPFILE_RtfAddHexBytes(rd, bi, sizeof(bi->bmiHeader) + nc * sizeof(RGBQUAD))) goto done;
     }
     else
     {
-        sprintf(tmp, "\\wbitmap0\\wbmbitspixel%d\\wbmplanes%d\\picw%d\\pich%d",
+        /* 96dpi: 15twips = 1px */
+        sprintf(tmp, "\\wbitmap0\\wbmbitspixel%d\\wbmplanes%d\\picw%d\\pich%d\\picwgoal%d\\pichgoal%d",
                 bi->bmiHeader.biBitCount, bi->bmiHeader.biPlanes,
-                bi->bmiHeader.biWidth, bi->bmiHeader.biHeight);
+                bi->bmiHeader.biWidth, bi->bmiHeader.biHeight,
+                bi->bmiHeader.biWidth * 15, bi->bmiHeader.biHeight * 15);
         if (!HLPFILE_RtfAddControl(rd, tmp)) goto done;
     }
     if (!HLPFILE_RtfAddHexBytes(rd, pict_beg, bi->bmiHeader.biSizeImage)) goto done;
@@ -1430,7 +1435,7 @@ static BOOL HLPFILE_BrowseParagraph(HLPFILE_PAGE* page, struct RtfData* rd,
 
         /* 0x1000 doesn't need space */
         if ((bits & 0x1000) && !HLPFILE_RtfAddControl(rd, "\\keep")) goto done;
-        if ((bits & 0xE080) != 0) 
+        if ((bits & 0xE080) != 0)
             WINE_FIXME("Unsupported bits %04x, potential trouble ahead\n", bits);
 
         while (text < text_end && format < format_end)
@@ -1447,7 +1452,7 @@ static BOOL HLPFILE_BrowseParagraph(HLPFILE_PAGE* page, struct RtfData* rd,
                 }
                 if (!HLPFILE_RtfAddText(rd, text)) goto done;
                 if (rd->force_color && !HLPFILE_RtfAddControl(rd, "}")) goto done;
-                rd->char_pos += textsize;
+                rd->char_pos += MultiByteToWideChar(rd->code_page, 0, text, textsize, NULL, 0);
             }
             /* else: null text, keep on storing attributes */
             text += textsize + 1;
@@ -1745,11 +1750,21 @@ BOOL    HLPFILE_BrowsePage(HLPFILE_PAGE* page, struct RtfData* rd,
     }
     if (ck)
     {
+        rd->code_page = CP_MACCP;
         sprintf(tmp, "{\\rtf1\\%s\\deff0", ck);
+
         if (!HLPFILE_RtfAddControl(rd, tmp)) return FALSE;
     }
     else
     {
+        if (hlpfile->charset == DEFAULT_CHARSET)
+        {
+            rd->code_page = CP_ACP;
+        }
+        else
+        {
+            rd->code_page = cpg;
+        }
         sprintf(tmp, "{\\rtf1\\ansi\\ansicpg%d\\deff0", cpg);
         if (!HLPFILE_RtfAddControl(rd, tmp)) return FALSE;
     }
@@ -2047,6 +2062,12 @@ static BOOL HLPFILE_SystemCommands(HLPFILE* hlpfile)
     if (hlpfile->version <= 16)
     {
         char *str = (char*)buf + 0x15;
+        if (*str == 0)
+        {
+            str = strrchr(hlpfile->lpszPath, '\\') + 1;
+            if (str == 1)
+                str = hlpfile->lpszPath;
+        }
 
         hlpfile->lpszTitle = HeapAlloc(GetProcessHeap(), 0, strlen(str) + 1);
         if (!hlpfile->lpszTitle) return FALSE;
@@ -2105,13 +2126,13 @@ static BOOL HLPFILE_SystemCommands(HLPFILE* hlpfile)
         case 6:
             if (GET_USHORT(ptr, 2) != 90) {WINE_WARN("system6\n");break;}
 
-	    if (hlpfile->windows) 
-        	hlpfile->windows = HeapReAlloc(GetProcessHeap(), 0, hlpfile->windows, 
+	    if (hlpfile->windows)
+        	hlpfile->windows = HeapReAlloc(GetProcessHeap(), 0, hlpfile->windows,
                                            sizeof(HLPFILE_WINDOWINFO) * ++hlpfile->numWindows);
-	    else 
-        	hlpfile->windows = HeapAlloc(GetProcessHeap(), 0, 
+	    else
+        	hlpfile->windows = HeapAlloc(GetProcessHeap(), 0,
                                            sizeof(HLPFILE_WINDOWINFO) * ++hlpfile->numWindows);
-	    
+
             if (hlpfile->windows)
             {
                 HLPFILE_WINDOWINFO* wi = &hlpfile->windows[hlpfile->numWindows - 1];
@@ -2131,6 +2152,7 @@ static BOOL HLPFILE_SystemCommands(HLPFILE* hlpfile)
                 wi->win_style = WS_OVERLAPPEDWINDOW;
                 wi->sr_color = (flags & 0x0100) ? GET_UINT(ptr, 86) : 0xFFFFFF;
                 wi->nsr_color = (flags & 0x0200) ? GET_UINT(ptr, 90) : 0xFFFFFF;
+                wi->flags = flags;
                 WINE_TRACE("System-Window: flags=%c%c%c%c%c%c%c%c type=%s name=%s caption=%s (%d,%d)x(%d,%d)\n",
                            flags & 0x0001 ? 'T' : 't',
                            flags & 0x0002 ? 'N' : 'n',
diff --git a/programs/winhlp32/hlpfile.h b/programs/winhlp32/hlpfile.h
index 55ef681edd..d561805f62 100644
--- a/programs/winhlp32/hlpfile.h
+++ b/programs/winhlp32/hlpfile.h
@@ -30,6 +30,7 @@ typedef struct
     POINT       origin;
     SIZE        size;
     int         style;
+    WORD        flags;
     DWORD       win_style;
     COLORREF    sr_color;       /* color for scrollable region */
     COLORREF    nsr_color;      /* color for non scrollable region */
@@ -198,6 +199,7 @@ struct RtfData {
     BOOL        force_color;
     unsigned    relative;       /* offset within page to lookup for */
     unsigned    char_pos_rel;   /* char_pos correspondinf to relative */
+    unsigned    code_page;
 };
 
 BOOL          HLPFILE_BrowsePage(HLPFILE_PAGE*, struct RtfData* rd,
diff --git a/programs/winhlp32/winhelp.c b/programs/winhlp32/winhelp.c
index 7ce5d4a0a8..1226d9c39e 100644
--- a/programs/winhlp32/winhelp.c
+++ b/programs/winhlp32/winhelp.c
@@ -39,6 +39,7 @@
 #include "winhelp_res.h"
 #include "shellapi.h"
 #include "richedit.h"
+#include "richole.h"
 #include "commctrl.h"
 
 #include "wine/debug.h"
@@ -196,12 +197,14 @@ BOOL WINHELP_GetOpenFileName(LPSTR lpszFile, int len)
 static INT WINHELP_MessageBoxIDS_s(UINT ids_text, LPCSTR str, UINT ids_title, WORD type)
 {
     CHAR text[MAX_STRING_LEN];
+    CHAR caption[MAX_STRING_LEN];
     CHAR newtext[MAX_STRING_LEN + MAX_PATH];
 
     LoadStringA(Globals.hInstance, ids_text, text, sizeof(text));
     wsprintfA(newtext, text, str);
+    LoadStringA(Globals.hInstance, ids_title, caption, sizeof(caption));
 
-    return MessageBoxA(0, newtext, MAKEINTRESOURCEA(ids_title), type);
+    return MessageBoxA(0, newtext, caption, type);
 }
 
 /***********************************************************************
@@ -301,7 +304,7 @@ static HLPFILE_WINDOWINFO*     WINHELP_GetPopupWindowInfo(HLPFILE* hlpfile,
     static      HLPFILE_WINDOWINFO      wi;
 
     RECT parent_rect;
-    
+
     wi.type[0] = wi.name[0] = wi.caption[0] = '\0';
 
     /* Calculate horizontal size and position of a popup window */
@@ -335,7 +338,8 @@ typedef struct
     LONG reserved;
     WORD ofsFilename;
     WORD ofsData;
-} WINHELP,*LPWINHELP;
+    WORD ofsPath;
+} WINEHELP,*LPWINEHELP;
 
 static BOOL WINHELP_HasWorkingWindow(void)
 {
@@ -344,6 +348,15 @@ static BOOL WINHELP_HasWorkingWindow(void)
     return Globals.active_win->page != NULL && Globals.active_win->page->file != NULL;
 }
 
+static void cb_KWBTreeKey(void *p, void **next, void *cookie)
+{
+    char **key = (char **)cookie;
+    if(!strcasecmp(*key, (char *)p))
+        *key = (char *)p;
+    *next = (char*)p + strlen((char*)p) + 7;
+}
+
+
 /******************************************************************
  *		WINHELP_HandleCommand
  *
@@ -352,7 +365,7 @@ static BOOL WINHELP_HasWorkingWindow(void)
 static LRESULT  WINHELP_HandleCommand(HWND hSrcWnd, LPARAM lParam)
 {
     COPYDATASTRUCT*     cds = (COPYDATASTRUCT*)lParam;
-    WINHELP*            wh;
+    WINEHELP*            wh;
 
     if (cds->dwData != 0xA1DE505)
     {
@@ -365,6 +378,8 @@ static LRESULT  WINHELP_HandleCommand(HWND hSrcWnd, LPARAM lParam)
     if (wh)
     {
         char*   ptr = (wh->ofsFilename) ? (LPSTR)wh + wh->ofsFilename : NULL;
+        if (wh->ofsPath)
+            SetCurrentDirectoryA((LPSTR)wh + wh->ofsPath);
 
         WINE_TRACE("Got[%u]: cmd=%u data=%08x fn=%s\n",
                    wh->size, wh->command, wh->data, debugstr_a(ptr));
@@ -414,9 +429,31 @@ static LRESULT  WINHELP_HandleCommand(HWND hSrcWnd, LPARAM lParam)
                 MACRO_JumpHash(ptr, "main", 0);
             }
             break;
+        case HELP_KEY:
+        {
+            HLPFILE *hlpfile = WINHELP_LookupHelpFile(ptr);
+            char *key;
+            int offset;
+            if (!hlpfile)
+            {
+                if (!WINHELP_HasWorkingWindow()) MACRO_Exit();
+                break;
+            }
+            key = ((char *)wh + wh->ofsData);
+            HLPFILE_BPTreeEnum(hlpfile->kwbtree, cb_KWBTreeKey, &key);
+            if (key == ((char *)wh + wh->ofsData))
+            {
+                HLPFILE_FreeHlpFile(hlpfile);
+                if (!WINHELP_HasWorkingWindow()) MACRO_Exit();
+                break;
+            }
+            offset = *(ULONG*)(key + strlen(key) + 3);
+            offset = *(long*)(hlpfile->kwdata + offset + 9);
+            WINHELP_OpenHelpWindow(HLPFILE_PageByOffset, hlpfile, offset, WINHELP_GetWindowInfo(hlpfile, "main"), SW_NORMAL);
+            break;
+        }
         /* case HELP_WM_HELP: */
         /* case HELP_SETPOPUP_POS: */
-        /* case HELP_KEY: */
         /* case HELP_COMMAND: */
         /* case HELP_PARTIALKEY: */
         /* case HELP_MULTIKEY: */
@@ -584,7 +621,8 @@ static void WINHELP_DeleteWindow(WINHELP_WINDOW* win)
 
 static char* WINHELP_GetCaption(WINHELP_WNDPAGE* wpage)
 {
-    if (wpage->wininfo->caption[0]) return wpage->wininfo->caption;
+    if ((wpage->wininfo->flags & 4) || !wpage->page)
+        return wpage->wininfo->caption;
     return wpage->page->file->lpszTitle;
 }
 
@@ -638,7 +676,6 @@ static HLPFILE_LINK* WINHELP_FindLink(WINHELP_WINDOW* win, LPARAM pos)
     mouse_ptl.y = (short)HIWORD(pos);
     cp = SendMessageW(GetDlgItem(win->hMainWnd, CTL_ID_TEXT), EM_CHARFROMPOS,
                       0, (LPARAM)&mouse_ptl);
-
     for (link = win->page->first_link; link; link = link->next)
     {
         if (link->cpMin <= cp && cp <= link->cpMax)
@@ -672,8 +709,17 @@ static LRESULT CALLBACK WINHELP_RicheditWndProc(HWND hWnd, UINT msg,
     WINHELP_WINDOW *win = (WINHELP_WINDOW*) GetWindowLongPtrW(GetParent(hWnd), 0);
     DWORD messagePos;
     POINT pt;
+    LRESULT result;
     switch(msg)
     {
+        case WM_KEYDOWN:
+        case WM_KEYUP:
+        case WM_LBUTTONDOWN:
+        case WM_MOUSEMOVE:
+        case WM_SETFOCUS:
+            result = CallWindowProcA(win->origRicheditWndProc, hWnd, msg, wParam, lParam);
+            HideCaret(hWnd);
+            return result;
         case WM_SETCURSOR:
             messagePos = GetMessagePos();
             pt.x = (short)LOWORD(messagePos);
@@ -690,6 +736,95 @@ static LRESULT CALLBACK WINHELP_RicheditWndProc(HWND hWnd, UINT msg,
     }
 }
 
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_QueryInterface(IRichEditOleCallback *This, REFIID riid, LPVOID * lplpObj)
+{
+    return S_OK;
+}
+
+ULONG STDMETHODCALLTYPE WINHELP_OLE_Callback_AddRef(IRichEditOleCallback *This)
+{
+    return 0;
+}
+
+ULONG STDMETHODCALLTYPE WINHELP_OLE_Callback_Release(IRichEditOleCallback *This)
+{
+    return 0;
+}
+
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_GetNewStorage(IRichEditOleCallback *This, LPSTORAGE *lplpstg)
+{
+    LPLOCKBYTES lpLockBytes = NULL;
+    HRESULT result = CreateILockBytesOnHGlobal(NULL, TRUE, &lpLockBytes);
+    if (result != S_OK)
+        return result;
+    result = StgCreateDocfileOnILockBytes(lpLockBytes, STGM_SHARE_EXCLUSIVE | STGM_CREATE | STGM_READWRITE, 0, lplpstg);
+    if (result != S_OK)
+        lpLockBytes->lpVtbl->Release(lpLockBytes);
+    return result;
+
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_GetInPlaceContext(IRichEditOleCallback *This, LPOLEINPLACEFRAME * lplpFrame,
+    LPOLEINPLACEUIWINDOW * lplpDoc,
+    LPOLEINPLACEFRAMEINFO lpFrameInfo)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_ShowContainerUI(IRichEditOleCallback *This, BOOL fShow)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_QueryInsertObject(IRichEditOleCallback *This, LPCLSID lpclsid, LPSTORAGE lpstg,
+    LONG cp)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_DeleteObject(IRichEditOleCallback *This, LPOLEOBJECT lpoleobj)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_QueryAcceptData(IRichEditOleCallback *This, LPDATAOBJECT lpdataobj,
+    CLIPFORMAT * lpcfFormat, DWORD reco,
+    BOOL fReally, HGLOBAL hMetaPict)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_ContextSensitiveHelp(IRichEditOleCallback *This, BOOL fEnterMode)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_GetClipboardData(IRichEditOleCallback *This, CHARRANGE * lpchrg, DWORD reco, LPDATAOBJECT * lplpdataobj)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_GetDragDropEffect(IRichEditOleCallback *This, BOOL fDrag, DWORD grfKeyState,
+    LPDWORD pdwEffect)
+{
+    return S_OK;
+}
+HRESULT STDMETHODCALLTYPE WINHELP_OLE_Callback_GetContextMenu(IRichEditOleCallback *This, WORD seltype, LPOLEOBJECT lpoleobj,
+    CHARRANGE * lpchrg,
+    HMENU * lphmenu)
+{
+    return S_OK;
+}
+IRichEditOleCallbackVtbl callbackv =
+{
+    WINHELP_OLE_Callback_QueryInterface,
+    WINHELP_OLE_Callback_AddRef,
+    WINHELP_OLE_Callback_Release,
+    WINHELP_OLE_Callback_GetNewStorage,
+    WINHELP_OLE_Callback_GetInPlaceContext,
+    WINHELP_OLE_Callback_ShowContainerUI,
+    WINHELP_OLE_Callback_QueryInsertObject,
+    WINHELP_OLE_Callback_DeleteObject,
+    WINHELP_OLE_Callback_QueryAcceptData,
+    WINHELP_OLE_Callback_ContextSensitiveHelp,
+    WINHELP_OLE_Callback_GetClipboardData,
+    WINHELP_OLE_Callback_GetDragDropEffect,
+    WINHELP_OLE_Callback_GetContextMenu
+};
+IRichEditOleCallback callback = { &callbackv };
+
 /***********************************************************************
  *
  *           WINHELP_CreateHelpWindow
@@ -749,7 +884,7 @@ BOOL WINHELP_CreateHelpWindow(WINHELP_WNDPAGE* wpage, int nCmdShow, BOOL remembe
                 win->page = wpage->page;
                 win->info = wpage->wininfo;
                 hTextWnd = GetDlgItem(win->hMainWnd, CTL_ID_TEXT);
-                WINHELP_SetupText(hTextWnd, win, wpage->relative);
+                DestroyWindow(hTextWnd);
 
                 InvalidateRect(win->hMainWnd, NULL, TRUE);
                 if (win->hHistoryWnd) InvalidateRect(win->hHistoryWnd, NULL, TRUE);
@@ -814,15 +949,17 @@ BOOL WINHELP_CreateHelpWindow(WINHELP_WNDPAGE* wpage, int nCmdShow, BOOL remembe
             /* Create button box and text Window */
             CreateWindowA(BUTTON_BOX_WIN_CLASS_NAME, "", WS_CHILD | WS_VISIBLE,
                          0, 0, 0, 0, win->hMainWnd, (HMENU)CTL_ID_BUTTON, Globals.hInstance, NULL);
+    }
 
-        hTextWnd = CreateWindowA(RICHEDIT_CLASS20A, NULL,
-                                ES_MULTILINE | ES_READONLY | WS_CHILD | WS_HSCROLL | WS_VSCROLL | WS_VISIBLE,
-                                0, 0, 0, 0, win->hMainWnd, (HMENU)CTL_ID_TEXT, Globals.hInstance, NULL);
-        SendMessageW(hTextWnd, EM_SETEVENTMASK, 0,
+    hTextWnd = CreateWindowA(RICHEDIT_CLASS20A, NULL,
+                    ES_MULTILINE | ES_READONLY | WS_CHILD | WS_HSCROLL | WS_VSCROLL | WS_VISIBLE,
+                    0, 0, 0, 0, win->hMainWnd, (HMENU)CTL_ID_TEXT, Globals.hInstance, NULL);
+    /* set ole callback for showing bitmaps */
+    SendMessageW(hTextWnd, EM_SETOLECALLBACK, NULL, &callback);
+    SendMessageW(hTextWnd, EM_SETEVENTMASK, 0,
                     SendMessageW(hTextWnd, EM_GETEVENTMASK, 0, 0) | ENM_MOUSEEVENTS);
-        win->origRicheditWndProc = (WNDPROC)SetWindowLongPtrA(hTextWnd, GWLP_WNDPROC,
-                                                             (LONG_PTR)WINHELP_RicheditWndProc);
-    }
+    win->origRicheditWndProc = (WNDPROC)SetWindowLongPtrA(hTextWnd, GWLP_WNDPROC,
+                    (LONG_PTR)WINHELP_RicheditWndProc);
 
     hIcon = (wpage->page) ? wpage->page->file->hIcon : NULL;
     if (!hIcon) hIcon = LoadImageW(Globals.hInstance, MAKEINTRESOURCEW(IDI_WINHELP), IMAGE_ICON,
diff --git a/programs/winhlp32/winhelp.h b/programs/winhlp32/winhelp.h
index 519dec215a..24ba299f2c 100644
--- a/programs/winhlp32/winhelp.h
+++ b/programs/winhlp32/winhelp.h
@@ -30,6 +30,8 @@
 #define BUTTON_CX               6
 #define BUTTON_CY               6
 
+#define RICHEDIT_CLASS20A       "RichEdit20A"
+
 #ifndef RC_INVOKED
 
 #include <stdarg.h>
